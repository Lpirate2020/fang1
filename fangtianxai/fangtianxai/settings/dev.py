# @Time : 2021/3/15 9:13 
# @Author : Lpirate
# @File : dev.py 
# @Software: PyCharm
# 开发环境配置文件
"""
Django settings for fangtianxai project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
import datetime
import os, sys

# os.path   拼接路径
# sys.path  查询导包路径
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# E:\0000bs\fangtianxia\fangtianxai\fangtianxai 项目位置
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# __file__当前文件，abspath绝对路径，dirname上一级
# print(BASE_DIR)
# print(sys.path)#路径：'E:\\0000bs\\fangtianxia'
# 追加系统导包路径（目的：1、注册子应用时方便，2、修改django认证系统的用户模型时只能使用  应用名.模型名）
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))  # 添加子应用路径优化注册路径

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '!5q1uxms37xyf&&6vpv1z0jn!e)lyvr$bxfj)0$xr$d9ezdt^r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许访问django的域名
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'www.fangtianxia.site', 'api.fangtianxia.site']

# Application definition

# 注册应用
INSTALLED_APPS = [
    # 'django_admin_bootstrapped',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 第三方应用
    'rest_framework',  # DRF框架注册
    'corsheaders',  # cors解决跨域问题
    # 自定义app
    'users.apps.UsersConfig',  # 用户模块
    'areas.apps.AreasConfig',  # 省市区模块
    'house.apps.HouseConfig'  # 房源模块

]

# 中间件
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 最外层的中间件解决跨域
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fangtianxai.urls'
# print(os.path.join(os.path.dirname(BASE_DIR), 'templates'))  # 模板地址
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(os.path.dirname(BASE_DIR), 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fangtianxai.wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',  # 数据库主机
        'PORT': 3306,  # 数据库端⼝
        'USER': 'root',  # 数据库⽤户名
        'PASSWORD': 'jkljkl',  # 数据库⽤户密码
        'NAME': 'test'  # 数据库名字
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'zh-hans'  # 更改后台文字

TIME_ZONE = 'Asia/Shanghai'  # 更改时区

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(os.path.dirname(BASE_DIR), 'static')]  # 静态资源路径配置

# 配置redis数据库作为缓存后端
CACHES = {
    "default": {  # 缓存省市区
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {  # 缓存session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_codes": {  # 缓存短信验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "success_user": {  # 登录用户信息
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"  # session引擎配置为内存缓存（cache）
SESSION_CACHE_ALIAS = "session"  # 缓存位置session

# 日志输出器
LOGGING = {
    'version': 1,  # 版本
    'disable_existing_loggers': False,  # 是否禁⽤已经存在的⽇志器
    'formatters': {  # ⽇志信息显示的格式
        'verbose': {  # 详细格式
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },  # 日志级别，时间，模块，具体行数，输出的消息
        'simple': {  # 简易格式
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },  # 日志级别，模块，具体行数，输出的消息
    },
    'filters': {  # 对⽇志进⾏过滤
        'require_debug_true': {  # django在debug模式下才输出⽇志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # ⽇志处理⽅法
        'console': {  # 向终端中输出⽇志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },  # debug为true时向终端输出简易格式日志
        'file': {  # 向⽂件中输出⽇志 输出无过滤
            'level': 'INFO',  # 级别：info
            'class': 'logging.handlers.RotatingFileHandler',  # 配置过滤器
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/fangtianxia.log"),  # ⽇志⽂件的位置
            'maxBytes': 300 * 1024 * 1024,  # 设置文件大小300m
            'backupCount': 10,  # 超出300m文件最多穿件10个
            'formatter': 'verbose'  # 格式输出为详细格式
        },
    },
    'loggers': {  # ⽇志器
        'django': {  # 定义了⼀个名为django的⽇志器
            'handlers': ['console', 'file'],  # 可以同时向终端与⽂件中输出⽇志
            'propagate': True,  # 是否继续传递⽇志信息
            'level': 'INFO',  # ⽇志器接收的最低⽇志级别
        },
    }
}

# DRF配置项
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'fangtianxai.utils.exceptions.exception_handler',  # 自定义exception_handler函数路径
    # 认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',  # JWT认证项目，默认首位，前端请求有Authentication时才起作用
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}

# 修改django认证系统的用户模型类
AUTH_USER_MODEL = 'users.User'

# CORS 追加⽩名单
CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:8080',
    'localhost:8080',
    'www.fangtianxia.site:8080',  # 前端使用
    'api.fangtianxia.site:8000',  # 后端使用
)
CORS_ALLOW_CREDENTIALS = True  # 跨域时允许携带cookie
CORS_ORIGIN_ALLOW_ALL = True  # 所有域名(ip)都可以访问后端接口
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
# JWT的有效期
JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=1),  # 修改token有效期为1天
    #     更改JWT登录视图的构造响应数据的函数
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'users.utils.jwt_response_payload_handler',
}

# 修改默认的登录认证后端
AUTHENTICATION_BACKENDS = ['users.utils.UsernameModelAuthBackend']

# 邮件配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.163.com'  # 163邮箱协议
EMAIL_PORT = 25  # 端口
# 发送邮件的邮箱
EMAIL_HOST_USER = '18334068851@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'QCJBAEBUYXZMHGGM'
# 收件⼈看到的发件⼈
EMAIL_FROM = 'python<18334068851@163.com>'

# DRF扩展，省市区部分数据缓存
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
    # 缓存存储
    'DEFAULT_USE_CACHE': 'default',
}
